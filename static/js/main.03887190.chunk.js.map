{"version":3,"sources":["firebase.js","Form.js","Header.js","Prompts.js","Message.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Form","handleInput","e","setState","inputValue","target","value","handleSubmit","preventDefault","props","displayMessage","state","className","action","onSubmit","this","htmlFor","type","id","placeholder","minLength","onChange","required","onClick","handleShowPrompts","handleShowMsgs","Component","Header","Prompts","tabIndex","aria-label","Message","message","font","msgColors","msgFonts","getRandomClassName","array","Math","floor","random","length","App","updatedMessages","messages","msgColor","msgFont","push","color","isHeaderVisible","isMsgVisible","database","ref","boolean","isPromptsVisible","on","res","newMessages","data","val","key","reverse","map","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.03887190.chunk.js","sourcesContent":["// === FIREBASE ===\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyAv4yn5_YF4yWXC08mhsQsgZHzneHpk3mQ\",\n  authDomain: \"lizzproject5.firebaseapp.com\",\n  databaseURL: \"https://lizzproject5.firebaseio.com\",\n  projectId: \"lizzproject5\",\n  storageBucket: \"lizzproject5.appspot.com\",\n  messagingSenderId: \"161316336238\",\n  appId: \"1:161316336238:web:361db54da2709a17cbac7f\",\n  measurementId: \"G-7Z18S98M76\",\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n","// === FORM ===\nimport React, { Component } from \"react\";\n\nclass Form extends Component {\n  // Initialize State ----- +\n  constructor() {\n    super();\n    this.state = {\n      inputValue: \"\",\n    };\n  }\n\n  // Component methods ----- +\n  handleInput = (e) => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.displayMessage(this.state.inputValue);\n\n    this.setState({\n      inputValue: \"\",\n    });\n  };\n\n  // Render JSX ----- +\n  render() {\n    return (\n      <form className=\"messageForm\" action=\"/\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"message\">Leave your message here:</label>\n        <textarea\n          type=\"text\"\n          id=\"message\"\n          placeholder=\"Your message here...\"\n          minLength=\"5\"\n          onChange={this.handleInput}\n          value={this.state.inputValue}\n          required\n        />\n        <div className=\"btnWrapper\">\n          <button type=\"button\" onClick={this.props.handleShowPrompts}>\n            Need a prompt?\n          </button>\n          <button type=\"submit\" className=\"postMsg\">\n            Post Message\n          </button>\n          <button\n            type=\"button\"\n            className=\"showSecrets\"\n            onClick={this.props.handleShowMsgs}\n          >\n            Just take me to the secrets..\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport Form from \"./Form\";\n\nconst Header = ({ displayMessage, handleShowPrompts, handleShowMsgs }) => {\n  return (\n    <header>\n      <div className=\"pageWrapper\">\n        <div className=\"headingWrapper\">\n          <h1>\n            <span>&lt;</span>Dev Secrets<span>&frasl;&gt;</span>\n          </h1>\n        </div>\n        <div className=\"intro\">\n          <p>\n            The antidote to imposter syndrome is talking about it and knowing\n            that you're not alone. Dev Secrets is an anonymous message board for\n            devs inspired by \"Post Secret\".{\" \"}\n          </p>\n          <p>\n            Leave an anonymous message to inspire other devs or unload some\n            stress, then take a peak into the inner world of other coders who\n            are just like you.\n          </p>\n        </div>\n\n        <Form\n          displayMessage={displayMessage}\n          handleShowPrompts={handleShowPrompts}\n          handleShowMsgs={handleShowMsgs}\n        />\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Prompts = ({ handleShowPrompts }) => {\n  return (\n    <section\n      className=\"prompts\"\n      tabIndex=\"0\"\n      onClick={() => handleShowPrompts(false)}\n    >\n      <div className=\"promptsModal\">\n        <h2>Message Prompts</h2>\n        <ul>\n          <li>What are your dev + career related fears?</li>\n          <li>What advice can you share for other developers?</li>\n          <li>Tell us something about your dev journey no one knows.</li>\n          <li>What are you most proud of as a developer?</li>\n        </ul>\n        <button\n          type=\"button\"\n          className=\"backButton\"\n          onClick={() => handleShowPrompts(false)}\n        >\n          Back\n        </button>\n        <button\n          className=\"faBack\"\n          aria-label=\"go back\"\n          onClick={() => handleShowPrompts(false)}\n        >\n          <i className=\"far fa-times-circle\"></i>\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default Prompts;\n","import React from \"react\";\n\nfunction Message({ message, className, font }) {\n  return (\n    <div className={`message ${className}`}>\n      <p className={font}>{message}</p>\n    </div>\n  );\n}\n\nexport default Message;\n","// === APP ===\n\n// Imports ----- +\nimport React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport Header from \"./Header\";\nimport Prompts from \"./Prompts\";\nimport Message from \"./Message\";\n\n// Module variables + Functions ----- +\nconst msgColors = [\"white\", \"yellow\", \"green\", \"blue\", \"purple\"];\n\nconst msgFonts = [\n  \"annie\",\n  \"reenie\",\n  \"amatic\",\n  \"sueEllen\",\n  \"swanky\",\n  \"arial\",\n  \"nanum\",\n  \"neucha\",\n  \"architects\",\n  \"amatic\",\n];\n\n// Takes an array and returns a random index value of that array\nconst getRandomClassName = (array) => {\n  const randomNum = Math.floor(Math.random() * array.length);\n  return array[randomNum];\n};\n\n// App Class Component ----- +\nclass App extends Component {\n  // Initialize State ----- +\n  constructor() {\n    super();\n    this.state = {\n      messages: [{}],\n      isHeaderVisible: true,\n      isMsgVisible: false,\n      isPromptsVisible: false,\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (res) => {\n      const newMessages = [];\n      const data = res.val();\n\n      for (let key in data) {\n        newMessages.push({\n          message: data[key],\n          color: getRandomClassName(msgColors),\n          font: getRandomClassName(msgFonts),\n        });\n      }\n\n      this.setState({\n        messages: newMessages,\n      });\n    });\n  }\n\n  // Handles form onSubmit event listener and updates state + firebase with new message and akes text area input value as an argument\n  displayMessage = (inputValue) => {\n    const updatedMessages = [...this.state.messages];\n    const msgColor = getRandomClassName(msgColors);\n    const msgFont = getRandomClassName(msgFonts);\n\n    // Pushes new message, color, and font to the copied array\n    updatedMessages.push({\n      message: inputValue,\n      color: msgColor,\n      font: msgFont,\n    });\n\n    // Updates state with the copied state array + our new message value\n    // Sets message visible to true\n    this.setState({\n      messages: updatedMessages,\n      isHeaderVisible: false,\n      isMsgVisible: true,\n    });\n\n    // pushes new message to firebase\n    const dbRef = firebase.database().ref();\n    dbRef.push(inputValue);\n  };\n\n  // Handles visibility of the prompts component\n  handleShowPrompts = (boolean) => {\n    this.setState({\n      isPromptsVisible: boolean,\n    });\n  };\n\n  // Handles visibility of header and message sections\n  handleShowMsgs = (boolean) => {\n    this.setState({\n      isHeaderVisible: !boolean,\n      isMsgVisible: boolean,\n    });\n  };\n\n  // Render JSX ----- +\n  render() {\n    return (\n      <div>\n        {/* Display Header Conditionally */}\n        {this.state.isHeaderVisible && (\n          <Header\n            displayMessage={this.displayMessage}\n            handleShowPrompts={() => this.handleShowPrompts(true)}\n            handleShowMsgs={this.handleShowMsgs}\n          />\n        )}\n\n        {/* Display messages conditionally */}\n        {this.state.isMsgVisible && (\n          <main>\n            <section className=\"messages pageWrapper\">\n              <div className=\"messageHeading\">\n                <h2>Dev Secrets...</h2>\n                <div className=\"btnWrapper\">\n                  <button onClick={() => this.handleShowMsgs(false)}>\n                    Post Again\n                  </button>\n                </div>\n              </div>\n\n              {/* Map messages and append each to page */}\n              {this.state.messages\n                .reverse()\n                .map(({ message, color, font }, index) => {\n                  return (\n                    <Message\n                      message={message}\n                      key={index}\n                      className={color}\n                      font={font}\n                    />\n                  );\n                })}\n            </section>\n          </main>\n        )}\n\n        {/* Display prompts modal conditionally */}\n        {this.state.isPromptsVisible && (\n          <Prompts handleShowPrompts={() => this.handleShowPrompts(false)} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/sass/styles.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}