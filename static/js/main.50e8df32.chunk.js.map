{"version":3,"sources":["firebase.js","Form.js","Header.js","Message.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Form","handleInput","e","setState","inputValue","target","value","handleSubmit","preventDefault","props","displayMessage","state","className","action","onSubmit","this","htmlFor","type","id","placeholder","minLength","maxLength","onChange","required","Component","Header","Message","message","font","msgColors","msgFonts","getRandomClassName","array","Math","floor","random","length","App","updatedMessages","messages","msgColor","msgFont","push","color","isVisible","database","ref","on","res","newMessages","data","val","key","map","index","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.50e8df32.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyAv4yn5_YF4yWXC08mhsQsgZHzneHpk3mQ\",\n  authDomain: \"lizzproject5.firebaseapp.com\",\n  databaseURL: \"https://lizzproject5.firebaseio.com\",\n  projectId: \"lizzproject5\",\n  storageBucket: \"lizzproject5.appspot.com\",\n  messagingSenderId: \"161316336238\",\n  appId: \"1:161316336238:web:361db54da2709a17cbac7f\",\n  measurementId: \"G-7Z18S98M76\",\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  constructor() {\n    super();\n    this.state = {\n      inputValue: \"\",\n    };\n  }\n\n  handleInput = (e) => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.displayMessage(this.state.inputValue);\n\n    this.setState({\n      inputValue: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"messageForm\" action=\"/\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"message\">Leave your message here:</label>\n        <textarea\n          type=\"text\"\n          id=\"message\"\n          placeholder=\"Your message here...\"\n          minLength=\"5\"\n          maxLength=\"150\"\n          onChange={this.handleInput}\n          value={this.state.inputValue}\n          required\n        />\n        <div className=\"btnWrapper\">\n          <button type=\"button\">Need a prompt?</button>\n          <button type=\"submit\">Post Message</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\nimport Form from \"./Form\";\n\nconst Header = ({ displayMessage }) => {\n  return (\n    <header>\n      <div className=\"pageWrapper\">\n        <div className=\"headingWrapper\">\n          <h1>\n            <span>&lt;</span>Dev Secrets<span>&frasl;&gt;</span>\n          </h1>\n        </div>\n        <p className=\"intro\">\n          The antidote to imposter syndrome is talking about it and knowing that\n          you're not alone. Dev Secrets is an anonymous message board for devs\n          inspired by \"Post Secret\". Leave an anonymous message to inspire other\n          devs or unload some stress, then take a peak into the inner world of\n          other coders who are just like you.\n        </p>\n\n        <Form displayMessage={displayMessage} />\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nfunction Message({ message, className, font }) {\n  return (\n    <div className={`message ${className}`}>\n      <p className={font}>{message}</p>\n    </div>\n  );\n}\n\nexport default Message;\n","// === APP ==\n\n// Imports ----- +\nimport React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport Header from \"./Header\";\nimport Message from \"./Message\";\n\n// Module variables\nconst msgColors = [\"white\", \"red\", \"yellow\", \"green\", \"blue\", \"purple\"];\n\nconst msgFonts = [\"annie\", \"reenie\", \"gaegu\", \"sueEllen\", \"swanky\", \"arial\"];\n\nconst getRandomClassName = (array) => {\n  const randomNum = Math.floor(Math.random() * array.length);\n  return array[randomNum];\n};\n\n// App Class Component ----- +\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [{}],\n      isVisible: false,\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (res) => {\n      const newMessages = [];\n      const data = res.val();\n\n      for (let key in data) {\n        newMessages.push({\n          message: data[key],\n          color: getRandomClassName(msgColors),\n          font: getRandomClassName(msgFonts),\n        });\n      }\n\n      this.setState({\n        messages: newMessages,\n      });\n    });\n  }\n\n  // Handles form event listener and updates state + firebase with new message\n  displayMessage = (inputValue) => {\n    const updatedMessages = [...this.state.messages];\n    const msgColor = getRandomClassName(msgColors);\n    const msgFont = getRandomClassName(msgFonts);\n\n    updatedMessages.push({\n      message: inputValue,\n      color: msgColor,\n      font: msgFont,\n    });\n\n    this.setState({\n      messages: updatedMessages,\n      isVisible: true,\n    });\n\n    const dbRef = firebase.database().ref();\n    dbRef.push(inputValue, msgColor, msgFont);\n  };\n\n  render() {\n    return (\n      <div className=\"viewport\">\n        <Header displayMessage={this.displayMessage} />\n        {this.state.isVisible && (\n          <main>\n            <section className=\"messages\">\n              <h2>Dev Secrets...</h2>\n              {/* Maps through messages array and appends new messages to page */}\n              {this.state.messages.map(({ message, color, font }, index) => {\n                console.log(message);\n                return (\n                  <Message\n                    message={message}\n                    key={index}\n                    className={color}\n                    font={font}\n                  />\n                );\n              })}\n            </section>\n          </main>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/sass/styles.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}