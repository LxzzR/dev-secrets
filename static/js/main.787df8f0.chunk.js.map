{"version":3,"sources":["firebase.js","Form.js","Landing.js","Prompts.js","Message.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Form","handleInput","e","setState","inputValue","target","value","handleSubmit","preventDefault","props","createMessage","state","className","action","onSubmit","this","htmlFor","type","id","placeholder","minLength","maxLength","onChange","required","onClick","handleShowMsgs","handleShowPrompts","Component","Landing","Prompts","tabIndex","aria-label","Message","message","font","useState","likeCounter","setLikeCounter","class","msgBorderColors","msgFonts","getRandomClassName","array","Math","floor","random","length","App","updatedMessages","messages","msgColor","msgFont","push","borderColor","display","database","ref","setDisplay","elementToDisplay","on","res","newMessages","data","val","key","color","reverse","map","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.787df8f0.chunk.js","sourcesContent":["// === FIREBASE ===\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyAv4yn5_YF4yWXC08mhsQsgZHzneHpk3mQ\",\n  authDomain: \"lizzproject5.firebaseapp.com\",\n  databaseURL: \"https://lizzproject5.firebaseio.com\",\n  projectId: \"lizzproject5\",\n  storageBucket: \"lizzproject5.appspot.com\",\n  messagingSenderId: \"161316336238\",\n  appId: \"1:161316336238:web:361db54da2709a17cbac7f\",\n  measurementId: \"G-7Z18S98M76\",\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n","// === FORM ===\nimport React, { Component } from \"react\";\n\nclass Form extends Component {\n  // Initialize State ----- +\n  constructor() {\n    super();\n    this.state = {\n      inputValue: \"\",\n    };\n  }\n\n  // Component methods ----- +\n  handleInput = (e) => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.createMessage(this.state.inputValue);\n\n    this.setState({\n      inputValue: \"\",\n    });\n  };\n\n  // Render JSX ----- +\n  render() {\n    return (\n      <form className=\"messageForm\" action=\"/\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"message\">Write a secret in the text box</label>\n        <textarea\n          type=\"text\"\n          id=\"message\"\n          placeholder=\"Write your dev secret or leave some motivation here...\"\n          minLength=\"5\"\n          maxLength=\"300\"\n          onChange={this.handleInput}\n          value={this.state.inputValue}\n          required\n        />\n        <div className=\"btnWrapper\">\n          <button\n            type=\"button\"\n            className=\"showSecrets\"\n            onClick={this.props.handleShowMsgs}\n          >\n            Skip to Secrets\n          </button>\n          <button type=\"button\" onClick={this.props.handleShowPrompts}>\n            Need a prompt?\n          </button>\n          <button type=\"submit\" className=\"postMsg\">\n            Post Message\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","// === LANDING ===\n\n// Imports ----- +\nimport React from \"react\";\nimport Form from \"./Form\";\n\n// Landing Component ----- +\nconst Landing = ({ createMessage, handleShowMsgs, handleShowPrompts }) => {\n  return (\n    <header>\n      <div className=\"pageWrapper\">\n        <div className=\"headingWrapper\">\n          <h1>\n            <span>&lt;</span>Dev Secrets...<span>&gt;</span>\n          </h1>\n        </div>\n        <div className=\"intro\">\n          <p>\n            It's often said that the antidote to imposter syndrome is talking\n            about it with others and realizing you're not alone. Dev Secrets is\n            an anonymous message board for devs, inspired by \"Post Secret\", to\n            help combat imposter syndrome.\n          </p>\n          <p>\n            Leave an anonymous message to inspire other devs or unload some\n            stress, then take a peek into the inner world of other coders who\n            are just like you.\n          </p>\n        </div>\n\n        <Form\n          createMessage={createMessage}\n          handleShowPrompts={handleShowPrompts}\n          handleShowMsgs={handleShowMsgs}\n        />\n      </div>\n    </header>\n  );\n};\n\nexport default Landing;\n","import React from \"react\";\n\nconst Prompts = ({ handleShowPrompts }) => {\n  return (\n    <section className=\"prompts\" tabIndex=\"0\" onClick={handleShowPrompts}>\n      <div className=\"promptsModal\">\n        <h2>Message Prompts</h2>\n        <ul>\n          <li>What are your dev + career related fears?</li>\n          <li>What advice can you share for other developers?</li>\n          <li>Tell us something about your dev journey no one knows.</li>\n          <li>What are you most proud of as a developer?</li>\n        </ul>\n        <button\n          type=\"button\"\n          className=\"backButton\"\n          onClick={handleShowPrompts}\n        >\n          Back\n        </button>\n        <button\n          className=\"faBack\"\n          aria-label=\"go back\"\n          onClick={handleShowPrompts}\n        >\n          <i className=\"far fa-times-circle \"></i>\n        </button>\n      </div>\n    </section>\n  );\n};\n\nexport default Prompts;\n","import React, { useState } from \"react\";\n\nfunction Message({ message, className, font }) {\n  const [likeCounter, setLikeCounter] = useState(0);\n  return (\n    <div className={`message ${className}`}>\n      <p className={font}>{message}</p>\n      <div className=\"buttonWrapper\">\n        {likeCounter}\n        <button onClick={() => setLikeCounter(likeCounter + 1)} type=\"button\">\n          <i class=\"fas fa-heart like\"></i>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Message;\n","// === APP ===\n\n// Imports ----- +\nimport React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport Landing from \"./Landing\";\nimport Prompts from \"./Prompts\";\nimport Message from \"./Message\";\n\n// Module variables + Functions ----- +\nconst msgBorderColors = [\"white\", \"yellow\", \"green\", \"blue\", \"purple\", \"pink\"];\n\nconst msgFonts = [\n  \"annie\",\n  \"reenie\",\n  \"sueEllen\",\n  \"swanky\",\n  \"arial\",\n  \"nanum\",\n  \"neucha\",\n  \"architects\",\n];\n\n// Takes an array and returns a random index value of that array\nconst getRandomClassName = (array) => {\n  const randomNum = Math.floor(Math.random() * array.length);\n  return array[randomNum];\n};\n\n// App Class Component ----- +\nclass App extends Component {\n  // Initialize State ----- +\n  constructor() {\n    super();\n    this.state = {\n      messages: [{}],\n      display: \"landing\",\n    };\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on(\"value\", (res) => {\n      const newMessages = [];\n      const data = res.val();\n\n      for (let key in data) {\n        newMessages.push({\n          message: data[key],\n          color: getRandomClassName(msgBorderColors),\n          font: getRandomClassName(msgFonts),\n        });\n      }\n\n      this.setState({\n        messages: newMessages,\n      });\n    });\n  }\n\n  // Handles form onSubmit event listener and updates state + firebase with new message and akes text area input value as an argument\n  createMessage = (inputValue) => {\n    const updatedMessages = [...this.state.messages];\n    const msgColor = getRandomClassName(msgBorderColors);\n    const msgFont = getRandomClassName(msgFonts);\n\n    // Pushes new message, color, and font to the copied array\n    updatedMessages.push({\n      message: inputValue,\n      borderColor: msgColor,\n      font: msgFont,\n    });\n\n    // Updates state with the copied state array + our new message value\n    this.setState({\n      display: \"messages\",\n    });\n\n    // pushes new message to firebase\n    const dbRef = firebase.database().ref();\n    dbRef.push(inputValue);\n  };\n\n  // Changes state depending on which elements should be displayed to the user\n  setDisplay = (elementToDisplay) => {\n    this.setState({\n      display: elementToDisplay,\n    });\n  };\n\n  // Render JSX ----- +\n  render() {\n    return (\n      <div>\n        {/* Display Landing Conditionally */}\n        {(this.state.display === \"landing\" ||\n          this.state.display === \"prompts\") && (\n          <Landing\n            createMessage={this.createMessage}\n            handleShowPrompts={() => this.setDisplay(\"prompts\")}\n            handleShowMsgs={() => this.setDisplay(\"messages\")}\n          />\n        )}\n\n        {/* Display messages conditionally */}\n        {this.state.display === \"messages\" && (\n          <main>\n            <section className=\"messages pageWrapper\">\n              <div className=\"messageHeading\">\n                <h2>Dev Secrets...</h2>\n                <div className=\"btnWrapper\">\n                  <button onClick={() => this.setDisplay(\"landing\")}>\n                    Post Again\n                  </button>\n                </div>\n              </div>\n\n              {/* Map messages and append each to page */}\n              {[...this.state.messages]\n                .reverse()\n                .map(({ message, color, font }, index) => {\n                  return (\n                    <Message\n                      message={message}\n                      key={index}\n                      className={color}\n                      font={font}\n                    />\n                  );\n                })}\n            </section>\n          </main>\n        )}\n\n        {/* Display prompts modal conditionally */}\n        {this.state.display === \"prompts\" && (\n          <Prompts handleShowPrompts={() => this.setDisplay(\"landing\")} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/sass/styles.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}